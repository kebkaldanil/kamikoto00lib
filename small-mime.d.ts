declare const mimeTable: Readonly<{
    txt: "text/plain";
    css: "text/css";
    html: "text/html";
    xml: "application/xml";
    xhtml: "application/xhtml+xml";
    js: "text/javasrcipt";
    jsm: "text/javasrcipt";
    apng: "image/apng";
    avif: "image/avif";
    gif: "image/gif";
    jpg: "image/jpeg";
    jpeg: "image/jpeg";
    jfif: "image/jpeg";
    pjpeg: "image/jpeg";
    pjp: "image/jpeg";
    png: "image/png";
    svg: "image/svg+xml";
    webp: "image/webp";
    bmp: "image/bmp";
    ico: "image/x-icon";
    cur: "image/x-icon";
    tif: "image/tiff";
    tiff: "image/tiff";
    wav: "audio/wave";
    weba: "audio/webm";
    ogg: "audio/ogg";
    oga: "audio/ogg";
    spx: "audio/ogg";
    opus: "audio/ogg";
    webm: "video/webm";
    ogv: "video/ogg";
    ogx: "application/ogg";
    zip: "application/zip";
    rar: "application/x-rar-compressed";
}>;
declare const extensionTable: Readonly<{
    "text/plain": "txt";
    "text/css": "css";
    "text/html": "html";
    "application/xml": "xml";
    "application/xhtml+xml": "xhtml";
    "text/javasrcipt": "js" | "jsm";
    "image/apng": "apng";
    "image/avif": "avif";
    "image/gif": "gif";
    "image/jpeg": "jpg" | "jpeg" | "jfif" | "pjpeg" | "pjp";
    "image/png": "png";
    "image/svg+xml": "svg";
    "image/webp": "webp";
    "image/bmp": "bmp";
    "image/x-icon": "ico" | "cur";
    "image/tiff": "tif" | "tiff";
    "audio/wave": "wav";
    "audio/webm": "weba";
    "audio/ogg": "ogg" | "oga" | "spx" | "opus";
    "video/webm": "webm";
    "video/ogg": "ogv";
    "application/ogg": "ogx";
    "application/zip": "zip";
    "application/x-rar-compressed": "rar";
} & {
    "text/ecmascript": string;
    "application/javascript": string;
    "application/ecmascript": string;
    "audio/wav": string;
    "audio/x-wav": string;
    "audio/x-pn-wav": string;
}>;
export declare type SupportedExtensions = keyof typeof mimeTable;
export declare type SupportedMime = keyof typeof extensionTable;
export declare function getType<S extends string>(path: S): Lowercase<S> extends `${string}.${infer T extends SupportedExtensions}` ? typeof mimeTable[T] : S extends SupportedExtensions ? typeof mimeTable[Lowercase<S>] : string extends S ? string : null;
export declare function getExtension<T extends string>(mime: T): Lowercase<T> extends SupportedMime ? typeof extensionTable[Lowercase<T>] : string extends T ? string : null;
export {};
